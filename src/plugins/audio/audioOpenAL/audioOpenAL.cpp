////////////////////////////////////////////////////////////////////////////////
#include "audioOpenAL.hpp"
#include <AL/al.h>
#include <AL/alc.h>
////////////////////////////////////////////////////////////////////////////////
PluginInfo pluginInfo = { "audioOpenAL",
                          "audioOpenAL",
                          0,
                          1};
////////////////////////////////////////////////////////////////////////////////
PluginAudioOpenAL* lib = nullptr;
////////////////////////////////////////////////////////////////////////////////
const PluginInfo* getPluginInfo()
{
    return &pluginInfo;
}
////////////////////////////////////////////////////////////////////////////////
Library* getLibInstance(Engine* engine)
{
    if (lib == nullptr)
    {
        lib = new PluginAudioOpenAL(*engine);
    }
    return lib;
}
////////////////////////////////////////////////////////////////////////////////
void closeLibInstance()
{
    delete lib;
    lib = nullptr;
}
////////////////////////////////////////////////////////////////////////////////
PluginAudioOpenAL::PluginAudioOpenAL(Engine &engine)
    : Library(engine)
{
    log().log() << "PluginAudioOpenAL start..." << std::endl;
    ALCdevice *device;
    device = alcOpenDevice(NULL);
    alcCloseDevice(device);
}
////////////////////////////////////////////////////////////////////////////////
PluginAudioOpenAL::~PluginAudioOpenAL()
{
    log().log() << "PluginAudioOpenAL stop..." << std::endl;
}
////////////////////////////////////////////////////////////////////////////////
