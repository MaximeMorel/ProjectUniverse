////////////////////////////////////////////////////////////////////////////////
#include "meshCodecCustom.hpp"
#include "core/geom/mesh/mesh.hpp"
#include "core/log/logManager.hpp"
#include "core/engine.hpp"
////////////////////////////////////////////////////////////////////////////////
PluginInfo pluginInfo = { "meshCodecCustom",
                          "meshCodecCustom",
                          "meshcodec",
                          0,
                          1};
////////////////////////////////////////////////////////////////////////////////
PluginMeshCodecCustom* lib = nullptr;
////////////////////////////////////////////////////////////////////////////////
const PluginInfo* getPluginInfo()
{
    return &pluginInfo;
}
////////////////////////////////////////////////////////////////////////////////
Library* getLibInstance(Engine* engine)
{
    if (lib == nullptr)
    {
        lib = new PluginMeshCodecCustom(*engine);
        if (lib)
        {
            //engine->addCodec(lib);
        }
    }
    return lib;
}
////////////////////////////////////////////////////////////////////////////////
void closeLibInstance()
{
    if (lib)
    {

    }
    delete lib;
    lib = nullptr;
}
////////////////////////////////////////////////////////////////////////////////
PluginMeshCodecCustom::PluginMeshCodecCustom(Engine &engine)
    : Library(engine)
{
    log().log() << "PluginMeshCodecCustom start...\n";
}
////////////////////////////////////////////////////////////////////////////////
PluginMeshCodecCustom::~PluginMeshCodecCustom()
{
    log().log() << "PluginMeshCodecCustom stop...\n";
}
////////////////////////////////////////////////////////////////////////////////
bool PluginMeshCodecCustom::load(Mesh* mesh)
{
    return false;
}
////////////////////////////////////////////////////////////////////////////////
