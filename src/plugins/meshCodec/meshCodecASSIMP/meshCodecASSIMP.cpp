////////////////////////////////////////////////////////////////////////////////
#include "meshCodecASSIMP.hpp"
#include "core/log/logManager.hpp"
#include "core/engine.hpp"
#include <assimp/Importer.hpp>
#include <assimp/scene.h>
#include <assimp/postprocess.h>
////////////////////////////////////////////////////////////////////////////////
PluginInfo pluginInfo = { "meshCodecASSIMP",
                          "meshCodecASSIMP",
                          "meshcodec",
                          0,
                          1};
////////////////////////////////////////////////////////////////////////////////
PluginMeshCodecASSIMP* lib = nullptr;
////////////////////////////////////////////////////////////////////////////////
const PluginInfo* getPluginInfo()
{
    return &pluginInfo;
}
////////////////////////////////////////////////////////////////////////////////
Library* getLibInstance(Engine* engine)
{
    if (lib == nullptr)
    {
        lib = new PluginMeshCodecASSIMP(*engine);
        if (lib)
        {
            //engine->addCodec(lib);
        }
    }
    return lib;
}
////////////////////////////////////////////////////////////////////////////////
void closeLibInstance()
{
    delete lib;
    lib = nullptr;
}
////////////////////////////////////////////////////////////////////////////////
PluginMeshCodecASSIMP::PluginMeshCodecASSIMP(Engine &engine)
    : Library(engine)
{
    log().log() << "PluginMeshCodecASSIMP start...\n";

    Assimp::Importer importer;
}
////////////////////////////////////////////////////////////////////////////////
PluginMeshCodecASSIMP::~PluginMeshCodecASSIMP()
{
    log().log() << "PluginMeshCodecASSIMP stop...\n";
}
////////////////////////////////////////////////////////////////////////////////
/*bool PluginMeshCodecASSIMP::load(ImageRGBAPtr image)
{
    return false;
}*/
////////////////////////////////////////////////////////////////////////////////
