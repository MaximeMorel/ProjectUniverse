////////////////////////////////////////////////////////////////////////////////
#include "shader.hpp"
#include "renderManager.hpp"
#include "renderPlugin.hpp"
////////////////////////////////////////////////////////////////////////////////
ResourceType Shader::type("Shader");
////////////////////////////////////////////////////////////////////////////////
Shader::Shader(const std::string& name, const std::string& fileName, Type t)
    : Resource(name)
    , m_shaderId(0)
    , m_isCompiled(false)
    , m_compileError(false)
{
}
////////////////////////////////////////////////////////////////////////////////
Shader::~Shader()
{
}
////////////////////////////////////////////////////////////////////////////////
ShaderPtr Shader::create(const std::string& name, const std::string& fileName, Type t)
{
    /// virtual constructor idiom, use create facility from render plugin
    return render().impl()->createShader(name, fileName, t);
}
////////////////////////////////////////////////////////////////////////////////
const char* Shader::getSearchPath()
{
    return render().impl()->getSearchPath();
}
////////////////////////////////////////////////////////////////////////////////
bool Shader::compile()
{
    return false;
}
////////////////////////////////////////////////////////////////////////////////
bool Shader::isCompiled() const
{
    return m_isCompiled;
}
////////////////////////////////////////////////////////////////////////////////
uint32_t Shader::getShaderId() const
{
    return m_shaderId;
}
////////////////////////////////////////////////////////////////////////////////
void Shader::printOn(Logger& o) const
{

}
////////////////////////////////////////////////////////////////////////////////
