////////////////////////////////////////////////////////////////////////////////
#include "shaderProgram.hpp"
#include "renderManager.hpp"
#include "renderPlugin.hpp"
////////////////////////////////////////////////////////////////////////////////
ShaderProgram::ShaderProgram(const std::string& name, std::initializer_list<ShaderPtr> shaders)
    : Resource(name)
    , m_isLinked(false)
    , m_linkError(false)
{
}
////////////////////////////////////////////////////////////////////////////////
ShaderProgram::~ShaderProgram()
{
}
////////////////////////////////////////////////////////////////////////////////
ShaderProgramPtr ShaderProgram::create(const std::string& name,
                               std::initializer_list<ShaderPtr> shaders)
{
    // parse name file (ex: effect1.sp, using data path and plugin path),
    // ex: data/shaders/opengl4/effect1.sp
    // containing something like:
    // effect1.vs
    // effect1.gs
    // effect1.ps
    // create shader resource for each line
    //ShaderPtr s1 = render().impl()->createShader(name, type);
    /// virtual constructor idiom, use create facility from render plugin
    ShaderProgramPtr res = render().impl()->createShaderProgram(name, shaders);
    //res->addShader(s1);
    return res;
}
////////////////////////////////////////////////////////////////////////////////
uint32_t ShaderProgram::getProgId() const
{
    return m_shaderProgId;
}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::bind()
{

}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::unbind()
{

}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::addShader(ShaderPtr shader)
{

}
////////////////////////////////////////////////////////////////////////////////
bool ShaderProgram::link()
{
    return false;
}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::printOn(Logger& o) const
{

}
////////////////////////////////////////////////////////////////////////////////
