////////////////////////////////////////////////////////////////////////////////
#include "shaderProgram.hpp"
#include "renderManager.hpp"
#include "renderPlugin.hpp"
////////////////////////////////////////////////////////////////////////////////
ShaderProgram::ShaderProgram(const std::string& name, std::initializer_list<ShaderPtr> shaders)
    : Resource(name)
    , m_isLinked(false)
    , m_linkError(false)
{
}
////////////////////////////////////////////////////////////////////////////////
ShaderProgram::~ShaderProgram()
{
}
////////////////////////////////////////////////////////////////////////////////
ShaderProgramPtr ShaderProgram::create(const std::string& name,
                               std::initializer_list<ShaderPtr> shaders)
{
    /// virtual constructor idiom, use create facility from render plugin
    return render().impl()->createShaderProgram(name, shaders);
}
////////////////////////////////////////////////////////////////////////////////
uint32_t ShaderProgram::getProgId() const
{
    return m_shaderProgId;
}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::bind() const
{

}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::unbind() const
{

}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::addShader(ShaderPtr shader)
{

}
////////////////////////////////////////////////////////////////////////////////
bool ShaderProgram::link()
{
    return false;
}
////////////////////////////////////////////////////////////////////////////////
void ShaderProgram::printOn(Logger& o) const
{

}
////////////////////////////////////////////////////////////////////////////////
