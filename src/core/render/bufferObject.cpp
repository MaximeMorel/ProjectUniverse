////////////////////////////////////////////////////////////////////////////////
#include "bufferObject.hpp"
#include "core/log/logManager.hpp"
#include "renderManager.hpp"
#include "renderPlugin.hpp"
////////////////////////////////////////////////////////////////////////////////
ResourceType BufferObject::type("BufferObject");
////////////////////////////////////////////////////////////////////////////////
BufferObject::BufferObject(const std::string& name)
: Resource(name)
{
}
////////////////////////////////////////////////////////////////////////////////
BufferObject::~BufferObject()
{
}
////////////////////////////////////////////////////////////////////////////////
BufferObjectPtr BufferObject::create(const std::string& name)
{
    /// virtual constructor idiom, use create facility from render plugin
    return render().impl()->createBufferObject(name);
}
////////////////////////////////////////////////////////////////////////////////
uint32_t BufferObject::getBufferObjectId() const
{
    return m_bufferId;
}
////////////////////////////////////////////////////////////////////////////////
void BufferObject::bindVBO()
{
}
////////////////////////////////////////////////////////////////////////////////
void BufferObject::bindIBO()
{
}
////////////////////////////////////////////////////////////////////////////////
void BufferObject::setData(const void* data, size_t size)
{
}
////////////////////////////////////////////////////////////////////////////////
