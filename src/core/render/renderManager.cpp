////////////////////////////////////////////////////////////////////////////////
#include "core/log/logManager.hpp"
#include "renderManager.hpp"
#include "renderPlugin.hpp"
#include "core/engine.hpp"
////////////////////////////////////////////////////////////////////////////////
RenderManager* gRender = nullptr;
////////////////////////////////////////////////////////////////////////////////
RenderManager::RenderManager()
    : m_plugin(nullptr)
{
}
////////////////////////////////////////////////////////////////////////////////
RenderManager::~RenderManager()
{
}
////////////////////////////////////////////////////////////////////////////////
void RenderManager::setPlugin(PluginLibPtr inputPlugin)
{
    if (m_plugin)
    {
        // clean current plugin
        log().log() << "Removing current Render Plugin\n";
    }
    const PluginInfo& pluginInfo = inputPlugin->getInfo();
    if (pluginInfo.type == std::string("render"))
    {
        RenderPlugin* plugin = static_cast<RenderPlugin*>(inputPlugin->getLibInstance(&getEngine()));
        m_plugin = plugin;

        log().log() << "Render Plugin set\n";
    }
    else
    {
        log().log() << "Wrong Render Plugin\n";
    }
}

////////////////////////////////////////////////////////////////////////////////
size_t RenderManager::getMemSize() const
{
    return sizeof(*this);
}
////////////////////////////////////////////////////////////////////////////////
void RenderManager::printOn(Logger& o) const
{

}
////////////////////////////////////////////////////////////////////////////////
void setGlobalRender(RenderManager& render)
{
    gRender = &render;
}
////////////////////////////////////////////////////////////////////////////////
RenderManager& render()
{
    return *gRender;
}
////////////////////////////////////////////////////////////////////////////////
