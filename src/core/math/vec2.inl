////////////////////////////////////////////////////////////////////////////////
#include "vec2.hpp"
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec2<T>::TVec2()
: x(0), y(0)
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec2<T>::TVec2(const T& x, const T& y)
: x(x), y(y)
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T TVec2<T>::operator[](size_t i) const
{
    return *(((T*)&x)+i);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T& TVec2<T>::operator[](size_t i)
{
    return *(((T*)&x)+i);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
size_t TVec2<T>::getMemSize() const
{
    return sizeof(*this);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
std::ostream& operator<<(std::ostream& o, const TVec2<T>& v)
{
    return o << "(" << v.x << ", " << v.y << ")";
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
Logger& operator<<(Logger& o, const TVec2<T>& v)
{
    return o << "(" << v.x << ", " << v.y << ")";
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
bool operator==(const TVec2<T>& lhs, const TVec2<T>& rhs)
{
    return (lhs.x == rhs.x && lhs.y == rhs.y);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
bool operator!=(const TVec2<T>& lhs, const TVec2<T>& rhs)
{
    return (lhs.x != rhs.x || lhs.y != rhs.y);
}
////////////////////////////////////////////////////////////////////////////////
//template class TVec2<int>;
//template class TVec2<float>;
//template class TVec2<double>;
////////////////////////////////////////////////////////////////////////////////
