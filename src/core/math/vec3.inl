////////////////////////////////////////////////////////////////////////////////
#include "vec3.hpp"
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T>::TVec3()
: x(0), y(0), z(0)
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T>::TVec3(const T& x, const T& y, const T& z)
: x(x), y(y), z(z)
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T> TVec3<T>::operator+(const TVec3& v) const
{
    return TVec3<T>(x+v.x, y+v.y, z+v.z);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T> TVec3<T>::operator-(const TVec3& v) const
{
    return TVec3<T>(x-v.x, y-v.y, z-v.z);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T> TVec3<T>::operator*(T f) const
{
    return TVec3<T>(x*f, y*f, z*f);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T> TVec3<T>::operator/(T f) const
{
    return TVec3<T>(x/f, y/f, z/f);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TVec3<T> TVec3<T>::operator-() const
{
    return TVec3<T>(-x, -y, -z);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
size_t TVec3<T>::getMemSize() const
{
    return sizeof(*this);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
std::ostream& operator<<(std::ostream& o, const TVec3<T>& v)
{
    return o << "(" << v.x << ", " << v.y << ", " << v.z << ")";
}
////////////////////////////////////////////////////////////////////////////////
//template class TVec3<int>;
//template class TVec3<float>;
//template class TVec3<double>;
////////////////////////////////////////////////////////////////////////////////
