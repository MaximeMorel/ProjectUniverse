////////////////////////////////////////////////////////////////////////////////
#include "timer.hpp"
#include <thread>
////////////////////////////////////////////////////////////////////////////////
Timer::Timer()
    : m_start(std::chrono::nanoseconds::zero())
{}
////////////////////////////////////////////////////////////////////////////////
void Timer::start()
{
    m_start = now();
}
////////////////////////////////////////////////////////////////////////////////
void Timer::pause()
{}
////////////////////////////////////////////////////////////////////////////////
void Timer::stop()
{}
////////////////////////////////////////////////////////////////////////////////
void Timer::reset()
{
    start();
}
////////////////////////////////////////////////////////////////////////////////
std::chrono::microseconds Timer::getTime() const
{
    return std::chrono::duration_cast<std::chrono::microseconds>(now() - m_start);
}
////////////////////////////////////////////////////////////////////////////////
void Timer::wait(std::chrono::microseconds microseconds)
{
    std::this_thread::sleep_for(microseconds);
}
////////////////////////////////////////////////////////////////////////////////
std::chrono::steady_clock::time_point Timer::now()
{
    return std::chrono::steady_clock::now();
}
////////////////////////////////////////////////////////////////////////////////
Logger& operator<<(Logger& o, const Timer& timer)
{
    return o << timer.m_start.time_since_epoch().count();
}
////////////////////////////////////////////////////////////////////////////////
