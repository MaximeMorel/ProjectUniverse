////////////////////////////////////////////////////////////////////////////////
//#include "singletonManager.hpp"
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T *Singleton<T>::m_instance = 0;
////////////////////////////////////////////////////////////////////////////////
template <typename T>
Singleton<T>::Singleton()
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
Singleton<T>::~Singleton()
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
inline T & Singleton<T>::getInstance()
{
    if(!m_instance)
    {
        m_instance = new T;
        //SingletonManager::getInstance().add(m_instance);
    }
    return *m_instance;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
void Singleton<T>::destroy()
{
    delete m_instance;
    m_instance = 0;
}
////////////////////////////////////////////////////////////////////////////////
