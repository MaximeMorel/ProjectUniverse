////////////////////////////////////////////////////////////////////////////////
#include "windowPlugin.hpp"
////////////////////////////////////////////////////////////////////////////////
WindowPlugin::WindowPlugin(Engine& engine)
    : Library(engine)
    , m_title("main")
    , m_contextType(GfxContextType::NONE)
    , m_borderless(false)
    , m_fullscreen(false)
    , m_resolution(800, 600)
{
}
////////////////////////////////////////////////////////////////////////////////
WindowPlugin::~WindowPlugin()
{
}
////////////////////////////////////////////////////////////////////////////////
bool WindowPlugin::createContext(GfxContextType type)
{
    return false;
}
////////////////////////////////////////////////////////////////////////////////
void WindowPlugin::update()
{
}
////////////////////////////////////////////////////////////////////////////////
bool WindowPlugin::setResolution(uint32_t x, uint32_t y)
{
    m_resolution = Vec2ui(x, y);
    if (m_resizeCallback)
        m_resizeCallback(x, y);
    return true;
}
////////////////////////////////////////////////////////////////////////////////
bool WindowPlugin::setPosition(uint32_t x, uint32_t y)
{
    m_position = Vec2ui(x, y);
    return true;
}
////////////////////////////////////////////////////////////////////////////////
bool WindowPlugin::setFullscreenMode(bool mode)
{
    m_fullscreen = mode;
    return true;
}
////////////////////////////////////////////////////////////////////////////////
bool WindowPlugin::setBorderlessMode(bool mode)
{
    m_borderless = mode;
    return true;
}
////////////////////////////////////////////////////////////////////////////////
bool WindowPlugin::setTitle(const std::string& title)
{
    m_title = title;
    return true;
}
////////////////////////////////////////////////////////////////////////////////
const std::string& WindowPlugin::getTitle() const
{
    return m_title;
}
////////////////////////////////////////////////////////////////////////////////
void WindowPlugin::swapBuffers()
{
}
////////////////////////////////////////////////////////////////////////////////
uint32_t WindowPlugin::getWindowId() const
{
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
void WindowPlugin::setEventResizeCallback(const std::function<void(uint32_t, uint32_t)>& func)
{
    m_resizeCallback = func;
}
////////////////////////////////////////////////////////////////////////////////
void WindowPlugin::setEventCloseCallback(const std::function<void()>& func)
{
    m_closeCallback = func;
}
////////////////////////////////////////////////////////////////////////////////
