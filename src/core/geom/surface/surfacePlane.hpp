#ifndef __SURFACEPLANE_HPP__
#define __SURFACEPLANE_HPP__
////////////////////////////////////////////////////////////////////////////////
#include "surface.hpp"
#include "core/math/vec4.hpp"
////////////////////////////////////////////////////////////////////////////////
/// \brief Plane : form ax + by + xz + d = 0
////////////////////////////////////////////////////////////////////////////////
class SurfacePlane : public Surface
{
public:
    ////////////////////////////////////////////////////////////////////////////
    /// \brief Build a Plane from coeffs
    /// \param a a coeff
    /// \param b b coeff
    /// \param c c coeff
    /// \param d d coeff
    ////////////////////////////////////////////////////////////////////////////
    SurfacePlane(double a, double b, double c, double d);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Build a Plane from coeffs
    /// \param coeffs coeffs array (4 doubles)
    ////////////////////////////////////////////////////////////////////////////
    SurfacePlane(double *coeffs);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Build a Plane from coeffs
    /// \param coeffs Vec4 of coeffs
    ////////////////////////////////////////////////////////////////////////////
    SurfacePlane(const Vec4& coeffs);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Build a Plane from a point on the plane and plane normal
    /// \param point point on plane
    /// \param normal Plane normal
    ////////////////////////////////////////////////////////////////////////////
    SurfacePlane(const Vec3& point, const Vec3& normal);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Build a Plane from 3 points on the plane
    /// \param a point on plane
    /// \param b point on plane
    /// \param c point on plane
    ////////////////////////////////////////////////////////////////////////////
    SurfacePlane(const Vec3& a, const Vec3& b, const Vec3& c);

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get plane coeffs
    /// \return Vec4 containing a,b,c,d
    ////////////////////////////////////////////////////////////////////////////
    const Vec4& getCoeffs() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get plane coeffs
    /// \return Vec4 containing a,b,c,d
    ////////////////////////////////////////////////////////////////////////////
    Vec4& getCoeffs();

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Get Plane normal (from coeff a,b,c) not normalized
    /// \return Plane normal (Vec3(a,b,c))
    ////////////////////////////////////////////////////////////////////////////
    Vec3 getNormal() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Compute the normalized plane
    /// \return Normalized plane
    ////////////////////////////////////////////////////////////////////////////
    SurfacePlane normalize() const;

    virtual Vec3 computePoint(const Vec2& uv) const;
    virtual Vec3 computePoint(double u, double v) const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Compute the memory usage of object in bytes
    /// \return Memory usage of object in bytes
    ////////////////////////////////////////////////////////////////////////////
    virtual size_t getMemSize() const;

    ////////////////////////////////////////////////////////////////////////////
    /// \brief Compute the intersection of 3 planes
    /// \return Vec3 point of the intersection point
    ////////////////////////////////////////////////////////////////////////////
    static Vec3 intersect(const SurfacePlane& p0, const SurfacePlane& p1, const SurfacePlane& p2);

    friend Logger& operator<<(Logger& o, const SurfacePlane& plane);

private:
    Vec4 m_coeffs;  ///< Plane coeffs : a,b,c,d
};
////////////////////////////////////////////////////////////////////////////////
#endif // __SURFACEPLANE_HPP__
