////////////////////////////////////////////////////////////////////////////////
#include "plane.hpp"
////////////////////////////////////////////////////////////////////////////////
Plane::Plane(double a, double b, double c, double d)
: m_coeffs(a, b, c, d)
{
}
////////////////////////////////////////////////////////////////////////////////
Plane::Plane(double *coeffs)
: m_coeffs(coeffs[0], coeffs[1], coeffs[2], coeffs[3])
{
}
////////////////////////////////////////////////////////////////////////////////
Plane::Plane(const Vec4& coeffs)
: m_coeffs(coeffs)
{
}
////////////////////////////////////////////////////////////////////////////////
Plane::Plane(const Vec3& point, const Vec3& normal)
: m_coeffs(normal.x, normal.y, normal.z, -normal.dot(point))
{
}
////////////////////////////////////////////////////////////////////////////////
Plane::Plane(const Vec3& a, const Vec3& b, const Vec3& c)
: Plane(a, ((b-a).cross(c-a)).normalize())
{
}
////////////////////////////////////////////////////////////////////////////////
Vec3 Plane::getNormal() const
{
    return Vec3(m_coeffs.x, m_coeffs.y, m_coeffs.z);
}
////////////////////////////////////////////////////////////////////////////////
Plane Plane::normalize() const
{
    return Plane(m_coeffs*(1.0/getNormal().length()));
}
////////////////////////////////////////////////////////////////////////////////
size_t Plane::getMemSize() const
{
    return sizeof(*this);
}
////////////////////////////////////////////////////////////////////////////////
Vec3 Plane::intersect(const Plane& p0, const Plane& p1, const Plane& p2)
{
    // http://geomalgorithms.com/a05-_intersect-1.html
    return (-p1.getNormal().cross(p2.getNormal())*p0.m_coeffs.w - p2.getNormal().cross(p0.getNormal())*p1.m_coeffs.w - p0.getNormal().cross(p1.getNormal())*p2.m_coeffs.w)/(p0.getNormal().dot(p1.getNormal().cross(p2.getNormal())));
}
////////////////////////////////////////////////////////////////////////////////
std::ostream& operator<<(std::ostream& o, const Plane& plane)
{
    return o << plane.m_coeffs;
}
////////////////////////////////////////////////////////////////////////////////
