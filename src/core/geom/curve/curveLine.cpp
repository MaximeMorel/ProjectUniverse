////////////////////////////////////////////////////////////////////////////////
#include "curveLine.hpp"
////////////////////////////////////////////////////////////////////////////////
CurveLine::CurveLine(const Vec3& pointA, const Vec3& pointB)
    : m_points {0, 0}
{
}
////////////////////////////////////////////////////////////////////////////////
CurveLine::~CurveLine()
{
}
////////////////////////////////////////////////////////////////////////////////
void CurveLine::setPoint(size_t id, const Vec3& point)
{
    if (id < 2)
    {
        m_points[id] = point;
    }
}
////////////////////////////////////////////////////////////////////////////////
const Vec3& CurveLine::getPoint(size_t id) const
{
    if (id < 2)
    {
        return m_points[id];
    }
    return m_points[0];
}
////////////////////////////////////////////////////////////////////////////////
Vec3 CurveLine::computePoint(double u) const
{
    return ((m_points[0] * (1.0 - u)) + (m_points[1]) * u);
}
////////////////////////////////////////////////////////////////////////////////
size_t CurveLine::getMemSize() const
{
    return sizeof(*this);
}
////////////////////////////////////////////////////////////////////////////////
Logger& operator<<(Logger& o, const CurveLine& curve)
{
    o << "Line curve: " << curve.m_points[0] << ", " << curve.m_points[1];
    o << std::endl;
    return o;
}
////////////////////////////////////////////////////////////////////////////////
