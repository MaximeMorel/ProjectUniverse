////////////////////////////////////////////////////////////////////////////////
#include "image.hpp"
////////////////////////////////////////////////////////////////////////////////
Image::Image(const std::string& name, const std::string& fileName)
    : super(name, fileName)
{
}
////////////////////////////////////////////////////////////////////////////////
Image::~Image()
{
}
////////////////////////////////////////////////////////////////////////////////
ImagePtr Image::create(const std::string& name, const std::string& fileName)
{
    return nullptr;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TImage<T>::TImage(const std::string& name, const std::string& fileName)
    : super(name, fileName)
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TImage<T>::~TImage()
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
std::shared_ptr<TImage<T>> TImage<T>::create(const std::string& name, const std::string& fileName)
{
    //return render().impl()->createShader(name, fileName, type);
    return nullptr;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
const char* TImage<T>::getSearchPath()
{
    return "";
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
Vec2i TImage<T>::getResolution() const
{
    return m_resolution;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T TImage<T>::operator()(uint32_t x, uint32_t y) const
{
    return m_buffer[m_resolution.x * y + x];
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T& TImage<T>::operator()(uint32_t x, uint32_t y)
{
    return m_buffer[m_resolution.x * y + x];
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
size_t TImage<T>::getMemSize() const
{
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
void TImage<T>::printOn(Logger& o) const
{

}
////////////////////////////////////////////////////////////////////////////////
template class TImage<TVec3<uint8_t>>;
template class TImage<TVec4<uint8_t>>;
template class TImage<Vec4f>;
////////////////////////////////////////////////////////////////////////////////
