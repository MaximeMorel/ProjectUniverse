////////////////////////////////////////////////////////////////////////////////
#include "buffer.hpp"
#include "core/math/vec3.hpp"
#include "core/math/vec4.hpp"
////////////////////////////////////////////////////////////////////////////////
Buffer::Buffer()
    : super("")
{}
////////////////////////////////////////////////////////////////////////////////
Buffer::~Buffer()
{}
////////////////////////////////////////////////////////////////////////////////
bool Buffer::resize(size_t n)
{
    return false;
}
////////////////////////////////////////////////////////////////////////////////
size_t Buffer::size() const
{
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
size_t Buffer::elementSize() const
{
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TBuffer<T>::TBuffer()
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
TBuffer<T>::~TBuffer()
{
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
bool TBuffer<T>::resize(size_t n)
{
    m_buf.resize(n);
    return true;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
size_t TBuffer<T>::size() const
{
    return m_buf.size();
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
size_t TBuffer<T>::elementSize() const
{
    return sizeof(T);
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T TBuffer<T>::operator[](size_t n) const
{
    return m_buf[n];
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
T& TBuffer<T>::operator[](size_t n)
{
    return m_buf[n];
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
size_t TBuffer<T>::getMemSize() const
{
    return 0;
}
////////////////////////////////////////////////////////////////////////////////
template <typename T>
void TBuffer<T>::printOn(Logger& o) const
{

}
////////////////////////////////////////////////////////////////////////////////
template class TBuffer<TVec3<uint8_t>>;
template class TBuffer<TVec4<uint8_t>>;
template class TBuffer<Vec4f>;
////////////////////////////////////////////////////////////////////////////////
