////////////////////////////////////////////////////////////////////////////////
#include "logManager.hpp"
#include <iostream>
////////////////////////////////////////////////////////////////////////////////
LogManager* gLog = nullptr;
////////////////////////////////////////////////////////////////////////////////
LogManager::LogManager()
{
    m_loggers.push_back(new LoggerStream("stdout", std::cout));
}
////////////////////////////////////////////////////////////////////////////////
LogManager::~LogManager()
{
    for (auto* logger : m_loggers)
    {
        delete logger;
    }
}
////////////////////////////////////////////////////////////////////////////////
Logger& LogManager::log()
{
    return *m_loggers[0];
}
////////////////////////////////////////////////////////////////////////////////
void setGlobalLogger(LogManager& log)
{
    gLog = &log;
}
////////////////////////////////////////////////////////////////////////////////
LogManager& log()
{
    return *gLog;
}
////////////////////////////////////////////////////////////////////////////////
