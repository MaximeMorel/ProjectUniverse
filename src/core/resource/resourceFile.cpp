////////////////////////////////////////////////////////////////////////////////
#include "resourceFile.hpp"
#include "core/resource/resourceManager.hpp"
#include "core/log/logManager.hpp"
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>
////////////////////////////////////////////////////////////////////////////////
ResourceType ResourceFile::type("ResourceFile");
////////////////////////////////////////////////////////////////////////////////
ResourceFile::ResourceFile(const std::string& name, const std::string& fileName)
    : super(name)
    , m_fileName(fileName)
    , m_mtime(0)
{
    updateMtime();
    m_flags |= Flags::IS_FILE;
}
////////////////////////////////////////////////////////////////////////////////
ResourceFile::~ResourceFile()
{
}
////////////////////////////////////////////////////////////////////////////////
const std::string& ResourceFile::getFileName() const
{
    return m_fileName;
}
////////////////////////////////////////////////////////////////////////////////
void ResourceFile::updateMtime()
{
    struct stat st;
    int err = stat(m_fileName.c_str(), &st);
    if (err == 0)
    {
        m_mtime = st.st_mtime;
    }
}
////////////////////////////////////////////////////////////////////////////////
void ResourceFile::printOn(Logger& o) const
{
    o << "ResourceFile (" << dyntype().getTypeName() << ") " << getId() << " " << getFileName();
}
////////////////////////////////////////////////////////////////////////////////
