////////////////////////////////////////////////////////////////////////////////
#include "engine.hpp"
#include <unistd.h>
////////////////////////////////////////////////////////////////////////////////
// Run main
// Start engine
// Process command line parameters (ex: app, resolution)
// Load config (hardcoded in engine, default engine config, app config)
// First create loggers
// Load res manager
// Load default config
// Load global config
// Get application name: --app param ?
// Load app specific config
// Load plugins
// Exec app
////////////////////////////////////////////////////////////////////////////////
Engine* gEngine = nullptr;
extern LogManager* gLog;
////////////////////////////////////////////////////////////////////////////////
Engine::Engine(const std::string& name)
    : m_config()
    , m_logManager()
    , m_resourceManager(m_logManager)
    , m_pluginManager()
    , m_name(name)
{
    setGlobalEngine(*this);
    m_logManager.log() << FILEINFO << "Engine " << m_name << " init...\n";
    m_logManager.log() << (LogLine() << FILEINFO << "Engine " << m_name << " init...\n");

    char buf[256];
    m_logManager.log() << getcwd(buf, 256) << "\n";
}
////////////////////////////////////////////////////////////////////////////////
Engine::~Engine()
{
    m_logManager.log() << "Engine " << m_name << " close...\n";
}
////////////////////////////////////////////////////////////////////////////////
LogManager& Engine::log()
{
    return m_logManager;
}
////////////////////////////////////////////////////////////////////////////////
ResourceManager& Engine::res()
{
    return m_resourceManager;
}
////////////////////////////////////////////////////////////////////////////////
PluginManager& Engine::plugins()
{
    return m_pluginManager;
}
////////////////////////////////////////////////////////////////////////////////
InputManager& Engine::input()
{
    return m_inputManager;
}
////////////////////////////////////////////////////////////////////////////////
RenderManager& Engine::render()
{
    return m_renderManager;
}
////////////////////////////////////////////////////////////////////////////////
void setGlobalEngine(Engine& engine)
{
    gEngine = &engine;
    setGlobalLogger(engine.log());
    setGlobalRender(engine.render());
}
////////////////////////////////////////////////////////////////////////////////
Engine& getEngine()
{
    return *gEngine;
}
////////////////////////////////////////////////////////////////////////////////
