////////////////////////////////////////////////////////////////////////////////
#include "testVec.hpp"
#include "core/math/vec2.hpp"
#include "core/math/vec3.hpp"
#include "core/math/vec4.hpp"
////////////////////////////////////////////////////////////////////////////////
void TestVec::setUp()
{
}
////////////////////////////////////////////////////////////////////////////////
void TestVec::tearDown()
{
}
////////////////////////////////////////////////////////////////////////////////
void TestVec::testEqual2()
{
    Vec2 v1(1,1);
    Vec2 v2 = v1;

    CPPUNIT_ASSERT(v1 == v2);

    for(int i=0; i<2; ++i)
    {
        v2 = v1;
        v2[i] = 99;
        CPPUNIT_ASSERT(v1 != v2);
    }
}
////////////////////////////////////////////////////////////////////////////////
void TestVec::testEqual3()
{
    Vec3 v1(1,2,3);
    Vec3 v2 = v1;

    CPPUNIT_ASSERT(v1 == v2);

    for(int i=0; i<3; ++i)
    {
        v2 = v1;
        v2[i] = 99;
        CPPUNIT_ASSERT(v1 != v2);
    }
}
////////////////////////////////////////////////////////////////////////////////
void TestVec::testEqual4()
{
    Vec4 v1(1,2,3,4);
    Vec4 v2 = v1;

    CPPUNIT_ASSERT(v1 == v2);

    for(int i=0; i<4; ++i)
    {
        v2 = v1;
        v2[i] = 99;
        CPPUNIT_ASSERT(v1 != v2);
    }
}
////////////////////////////////////////////////////////////////////////////////
